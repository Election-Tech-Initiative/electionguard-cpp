make.exe all --print-data-base --no-builtin-variables --no-builtin-rules --question
# GNU Make 4.3
# Built for Windows32
# Copyright (C) 1988-2020 Free Software Foundation, Inc.
# License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
# This is free software: you are free to change and redistribute it.
# There is NO WARRANTY, to the extent permitted by law.

# Make data base, printed on Fri Jun 03 11:44:18 2022

# Variables

# environment
FPS_BROWSER_APP_PROFILE_STRING = Internet Explorer
# environment
SYSTEMDRIVE = C:
# environment
LC_ALL = C
# environment
CAMLIBS = C:\Program Files\darktable\lib\libgphoto2\2.5.27
# environment
USERPROFILE = C:\Users\ratze
# environment
LOCALAPPDATA = C:\Users\ratze\AppData\Local
# environment
VSCODE_IPC_HOOK_EXTHOST = \\.\pipe\vscode-ipc-8ac9baee-7c43-4f1a-b127-3e5ad405a229-sock
# environment
VSCODE_CWD = C:\Users\ratze\AppData\Local\Programs\Microsoft VS Code
# environment
CHOCOLATEYINSTALL = C:\ProgramData\chocolatey
# environment
SYSTEMROOT = C:\WINDOWS
# environment
PROCESSOR_LEVEL = 23
# environment
PSMODULEPATH = C:\Program Files\WindowsPowerShell\Modules;C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules
# default
MAKE_COMMAND := C:/ProgramData/chocolatey/lib/make/tools/install/bin/make.exe
# automatic
@D = $(patsubst %/,%,$(patsubst %\,%,$(dir $@)))
# environment
CHROME_CRASHPAD_PIPE_NAME = \\.\pipe\crashpad_1136_PEBSGOQXKNXPRFLJ
# environment
IOLIBS = C:\Program Files\darktable\lib\libgphoto2_port\0.12.0
# environment
FPS_BROWSER_USER_PROFILE_STRING = Default
# environment
VSCODE_HANDLES_UNCAUGHT_ERRORS = true
# default
.VARIABLES := 
# makefile (from 'Makefile', line 32)
NDK_PATH = C:\Android\android-sdk\ndk-bundle
# automatic
%D = $(patsubst %/,%,$(patsubst %\,%,$(dir $%)))
# automatic
^D = $(patsubst %/,%,$(patsubst %\,%,$(dir $^)))
# environment
VSCODE_LOG_STACK = false
# automatic
%F = $(notdir $%)
# environment
VSCODE_CODE_CACHE_PATH = C:\Users\ratze\AppData\Roaming\Code\CachedData\c3511e6c69bb39013c4a4b7b9566ec1ca73fc4d5
# environment
LANG = C
# default
.LOADED := 
# environment
TMP = C:\Users\ratze\AppData\Local\Temp
# default
.INCLUDE_DIRS = .
# environment
PROCESSOR_ARCHITEW6432 = AMD64
# makefile
MAKEFLAGS = pqrR
# environment
ONEDRIVE = C:\Users\ratze\OneDrive
# makefile (from 'Makefile', line 7)
ELECTIONGUARD_BINDING_TEST_DIR = $(ELECTIONGUARD_BINDING_DIR)/netstandard/ElectionGuard/ElectionGuard.Encryption.Tests
# environment
POWERSHELL_DISTRIBUTION_CHANNEL = MSI:Windows 10 Home
# makefile
CURDIR := c:/Users/ratze/Desktop/contribution1CPPElectionGuard/electionguard-cpp
# environment
VSCODE_PIPE_LOGGING = true
# environment
APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL = 1
# automatic
*D = $(patsubst %/,%,$(patsubst %\,%,$(dir $*)))
# environment
PROGRAMFILES = C:\Program Files (x86)
# environment
MFLAGS = -pqrR
# default
.SHELLFLAGS := -c
# environment
PLSWORK = C:\msys64\mingw64\bin
# environment
COMMONPROGRAMW6432 = C:\Program Files\Common Files
# automatic
+D = $(patsubst %/,%,$(patsubst %\,%,$(dir $+)))
# makefile (from 'Makefile', line 1)
MAKEFILE_LIST := Makefile
# automatic
@F = $(notdir $@)
# environment
VSCODE_VERBOSE_LOGGING = true
# environment
VSCODE_PID = 1136
# automatic
?D = $(patsubst %/,%,$(patsubst %\,%,$(dir $?)))
# environment
__PSLOCKDOWNPOLICY = 0
# environment
MSMPI_BIN = C:\Program Files\Microsoft MPI\Bin\
# automatic
*F = $(notdir $*)
# environment
PLSWORKK = C:\msys64\usr\bin
# makefile (from 'Makefile', line 9)
ELECTIONGUARD_BUILD_DIR_WIN = $(subst \c\,C:\,$(subst /,\,$(ELECTIONGUARD_BUILD_DIR)))
# automatic
<D = $(patsubst %/,%,$(patsubst %\,%,$(dir $<)))
# environment
VSCODE_NLS_CONFIG = {"locale":"en-us","availableLanguages":{},"_languagePackSupport":true}
# environment
AMDRMPATH = C:\Program Files\AMD\RyzenMaster\
# default
MAKE_HOST := Windows32
# environment
PROGRAMDATA = C:\ProgramData
# default
SHELL := C:/msys64/usr/bin/sh.exe
# makefile (from 'Makefile', line 12)
ELECTIONGUARD_BUILD_LIBS_DIR = $(ELECTIONGUARD_BUILD_DIR)/libs
# environment
HOMEPATH = \Users\ratze
# default
MAKECMDGOALS := all
# environment
DRIVERDATA = C:\Windows\System32\Drivers\DriverData
# environment
COMSPEC = C:\WINDOWS\system32\cmd.exe
# environment
DOCKER_TOOLBOX_INSTALL_PATH = C:\Program Files\Docker Toolbox
# environment
WINDIR = C:\WINDOWS
# environment
MAKELEVEL := 0
# default
MAKE = $(MAKE_COMMAND)
# environment
PATH = C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Program Files\Microsoft MPI\Bin\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\QuickTime\QTSystem\;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\Program Files (x86)\CodeBlocks\MinGW\bin;C:\Program Files (x86)\CodeBlocks\MinGW;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft\Web Platform Installer\;C:\Program Files (x86)\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\140\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\140\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\140\Tools\Binn\ManagementStudio\;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\nodejs\;C:\Program Files\Git\cmd;C:\Program Files\Microsoft SQL Server\150\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files (x86)\PowerShell\7\;C:\ProgramData\chocolatey\bin;C:\Program Files\CMake\bin;C:\Program Files\LLVM\bin;C:\Program Files (x86)\dotnet\;C:\Program Files\Perforce\;C:\Users\ratze\.poetry\bin;C:\Users\ratze\AppData\Local\Programs\Python\Python310\Scripts\;C:\Users\ratze\AppData\Local\Programs\Python\Python310\;C:\Users\ratze\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Docker Toolbox;C:\Users\ratze\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\ratze\AppData\Local\GitHubDesktop\bin;C:\Users\ratze\AppData\Roaming\npm;C:\Users\ratze\.dotnet\tools;C:\msys64\mingw64\bin;C:\msys64\usr\bin;C:\Program Files\heroku\bin
# environment
COMPUTERNAME = DESKTOP-54K6E0D
# default
MAKEFILES := 
# makefile (from 'Makefile', line 11)
ELECTIONGUARD_BUILD_BINDING_DIR = $(ELECTIONGUARD_BUILD_DIR)/bindings
# automatic
^F = $(notdir $^)
# makefile (from 'Makefile', line 17)
OPERATING_SYSTEM := Windows
# environment
PROMPT = $P$G
# environment
CHOCOLATEYLASTPATHUPDATE = 132939157635098700
# environment
LOGONSERVER = \\DESKTOP-54K6E0D
# makefile (from 'Makefile', line 4)
ELECTIONGUARD_BINDING_DIR = $(realpath .)/bindings
# environment
VSCODE_LOG_NATIVE = false
# environment
USERNAME = ratze
# environment
COMMONPROGRAMFILES = C:\Program Files (x86)\Common Files
# environment
ADSK_CLM_WPAD_PROXY_CHECK = FALSE
# automatic
?F = $(notdir $?)
# environment
PROGRAMW6432 = C:\Program Files
# environment
PATHEXT = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
# automatic
+F = $(notdir $+)
# environment
MDL_SYSTEM_PATH = C:\ProgramData\NVIDIA Corporation\mdl\
# makefile (from 'Makefile', line 10)
ELECTIONGUARD_BUILD_APPS_DIR = $(ELECTIONGUARD_BUILD_DIR)/apps
# environment
ORIGINAL_XDG_CURRENT_DESKTOP = undefined
# environment
USERDOMAIN = DESKTOP-54K6E0D
# 'override' directive
GNUMAKEFLAGS := 
# environment
OS = Windows_NT
# environment
MAGICK_HOME = C:\Program Files\darktable\lib\GraphicsMagick-1.3.37\modules-Q8\coders
# makefile
.DEFAULT_GOAL := all
# makefile (from 'Makefile', line 5)
ELECTIONGUARD_BINDING_LIB_DIR = $(ELECTIONGUARD_BINDING_DIR)/netstandard/ElectionGuard/ElectionGuard.Encryption
# default
MAKE_VERSION := 4.3
# environment
PROGRAMFILES(X86) = C:\Program Files (x86)
# environment
USERDOMAIN_ROAMINGPROFILE = DESKTOP-54K6E0D
# environment
NUMBER_OF_PROCESSORS = 12
# environment
PUBLIC = C:\Users\Public
# environment
APPDATA = C:\Users\ratze\AppData\Roaming
# environment
HOMEDRIVE = C:
# environment
PROCESSOR_ARCHITECTURE = x86
# environment
VSCODE_AMD_ENTRYPOINT = vs/workbench/api/node/extensionHostProcess
# makefile (from 'Makefile', line 6)
ELECTIONGUARD_BINDING_BENCH_DIR = $(ELECTIONGUARD_BINDING_DIR)/netstandard/ElectionGuard/ElectionGuard.Encryption.Bench
# environment
COMMONPROGRAMFILES(X86) = C:\Program Files (x86)\Common Files
# makefile (from 'Makefile', line 13)
CPM_SOURCE_CACHE = $(realpath .)/.cache/CPM
# environment
ELECTRON_RUN_AS_NODE = 1
# environment
TEMP = C:\Users\ratze\AppData\Local\Temp
# environment
VSCODE_IPC_HOOK = \\.\pipe\fe8b3a7f395e50ada728ea56876ed681-1.67.2-main-sock
# default
.RECIPEPREFIX := 
# automatic
<F = $(notdir $<)
# default
SUFFIXES := 
# environment
ALLUSERSPROFILE = C:\ProgramData
# makefile (from 'Makefile', line 23)
TARGET = Release
# environment
SESSIONNAME = Console
# default
.FEATURES := target-specific order-only second-expansion else-if shortest-stem undefine oneshell nocomment grouped-target extra-prereqs archives jobserver output-sync load
# environment
PROCESSOR_REVISION = 0101
# environment
PROCESSOR_IDENTIFIER = AMD64 Family 23 Model 1 Stepping 1, AuthenticAMD
# makefile (from 'Makefile', line 8)
ELECTIONGUARD_BUILD_DIR = $(realpath .)/build
# variable set hash-table stats:
# Load=121/1024=12%, Rehash=0, Collisions=11/174=6%

# Pattern-specific Variable Values

# No pattern-specific variable values.

# Directories

# . (key c:/Users/ratze/Desktop/contribution1CPPElectionGuard/electionguard-cpp, mtime 1654215164): 29 files, no impossibilities.

# 29 files, no impossibilities in 1 directories.

# Implicit Rules

# No implicit rules.

# Files

coverage:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 384):
	@echo ✅ CHECK COVERAGE
	cmake -S . -B $(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64/$(TARGET) -G "MSYS Makefiles" \
		-DCMAKE_BUILD_TYPE=$(TARGET) \
		-DBUILD_SHARED_LIBS=ON \
		-DEXPORT_INTERNALS=ON \
		-DCAN_USE_VECTOR_INTRINSICS=ON \
		-DOPTION_ENABLE_TESTS=ON \
		-DCODE_COVERAGE=ON \
		-DCPM_SOURCE_CACHE=$(CPM_SOURCE_CACHE)
	cmake --build $(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64/$(TARGET)
	$(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64/$(TARGET)/test/ElectionGuardTests
	$(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64/$(TARGET)/test/ElectionGuardCTests

build-msvc:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 89):
	@echo 🖥️ BUILD MSVC
	cmake -S . -B $(ELECTIONGUARD_BUILD_LIBS_DIR)/msvc/Win32 -G "Visual Studio 16 2019" -A Win32 \
		-DCMAKE_BUILD_TYPE=$(TARGET) \
		-DBUILD_SHARED_LIBS=ON \
		-DCPM_SOURCE_CACHE=$(CPM_SOURCE_CACHE)
	cmake -S . -B $(ELECTIONGUARD_BUILD_LIBS_DIR)/msvc/x64 -G "Visual Studio 16 2019" -A x64 \
		-DCMAKE_BUILD_TYPE=$(TARGET) \
		-DBUILD_SHARED_LIBS=ON \
		-DCAN_USE_VECTOR_INTRINSICS=ON \
		-DCPM_SOURCE_CACHE=$(CPM_SOURCE_CACHE)
	cmake --build $(ELECTIONGUARD_BUILD_LIBS_DIR)/msvc/Win32 --config $(TARGET)
	cmake --build $(ELECTIONGUARD_BUILD_LIBS_DIR)/msvc/x64 --config $(TARGET)

generate-sample-data:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 413):
	@echo Generate Sample Data

# Not a target:
Makefile:
#  Implicit rule search has been done.
#  Last modified 2022-04-09 14:53:10
#  File has been updated.
#  Successfully updated.

sanitize-asan:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 232):
	@echo 🧼 SANITIZE ADDRESS AND UNDEFINED
	cmake -S . -B $(ELECTIONGUARD_BUILD_LIBS_DIR)/msvc/x64 -G "Visual Studio 16 2019" -A x64 \
		-DCMAKE_BUILD_TYPE=Debug \
		-DBUILD_SHARED_LIBS=ON \
		-DEXPORT_INTERNALS=ON \
		-DCAN_USE_VECTOR_INTRINSICS=ON \
		-DUSE_TEST_PRIMES=OFF \
		-DOPTION_ENABLE_TESTS=ON \
		-DUSE_SANITIZER="address" \
		-DLOG_LEVEL=debug \
		-DCPM_SOURCE_CACHE=$(CPM_SOURCE_CACHE)
	cmake --build $(ELECTIONGUARD_BUILD_LIBS_DIR)/msvc/x64 --config Debug
	$(ELECTIONGUARD_BUILD_LIBS_DIR)/msvc/x64/test/Debug/ElectionGuardTests
	$(ELECTIONGUARD_BUILD_LIBS_DIR)/msvc/x64/test/Debug/ElectionGuardCTests

clean:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 184):
	@echo 🗑️ Cleaning Output Directory
	pwsh -Command "rm -R -Fo $(ELECTIONGUARD_BUILD_DIR_WIN); $$null"

build-ios:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 147):
	@echo 📱 BUILD IOS
	echo "iOS builds are only supported on MacOS"

build-netframework: build-msvc
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 164):
	@echo 🖥️ BUILD NET FRAMEWORK
	pwsh -Command "msbuild ./bindings/netframework/ElectionGuard.NetFramework/ElectionGuard.NetFramework.x64.sln /t:Build /p:Configuration=$(TARGET); $$null"

.EXPORT_ALL_VARIABLES:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
.DEFAULT:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

all: environment build
#  Phony target (prerequisite of .PHONY).
#  Command line target.
#  Implicit rule search has not been done.
#  File does not exist.
#  File has been updated.
#  Needs to be updated (-q is set).
# variable set hash-table stats:
# Load=0/32=0%, Rehash=0, Collisions=0/3=0%

sanitize-tsan:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 270):
	@echo 🧼 SANITIZE THREADS
	echo "Thread sanitizer is only supported on Linux & Mac"

build:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 72):
	@echo 🧱 BUILD $(TARGET)
	cmake -S . -B $(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64/$(TARGET) -G "MSYS Makefiles" \
		-DCMAKE_BUILD_TYPE=$(TARGET) \
		-DBUILD_SHARED_LIBS=ON \
		-DCAN_USE_VECTOR_INTRINSICS=ON \
		-DCPM_SOURCE_CACHE=$(CPM_SOURCE_CACHE)
	cmake --build $(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64/$(TARGET)

memcheck:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 220):
	@echo 🧼 RUN STATIC ANALYSIS
	@echo "Static analysis is only supported on Linux"

test:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 333):
	@echo 🧪 TEST
	cmake -S . -B $(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64/$(TARGET) -G "MSYS Makefiles" \
		-DCMAKE_BUILD_TYPE=$(TARGET) \
		-DBUILD_SHARED_LIBS=ON \
		-DEXPORT_INTERNALS=ON \
		-DCAN_USE_VECTOR_INTRINSICS=ON \
		-DUSE_TEST_PRIMES=OFF \
		-DOPTION_ENABLE_TESTS=ON \
		-DLOG_LEVEL=debug \
		-DCPM_SOURCE_CACHE=$(CPM_SOURCE_CACHE)
	cmake --build $(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64/$(TARGET)
	$(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64/$(TARGET)/test/ElectionGuardTests
	$(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64/$(TARGET)/test/ElectionGuardCTests

build-netstandard:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 173):
	make build-msvc
	@echo 🖥️ BUILD NETSTANDARD
	cd ./bindings/netstandard/ElectionGuard && dotnet restore
	dotnet build --configuration $(TARGET) ./bindings/netstandard/ElectionGuard/ElectionGuard.sln /property:Platform=x86
	dotnet build --configuration $(TARGET) ./bindings/netstandard/ElectionGuard/ElectionGuard.sln /property:Platform=x64

rebuild: clean build
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

test-netstandard: build-netstandard
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 377):
	@echo 🧪 TEST NETSTANDARD
	dotnet test --configuration $(TARGET) ./bindings/netstandard/ElectionGuard/ElectionGuard.sln
	dotnet test --configuration $(TARGET) ./bindings/netstandard/ElectionGuard/ElectionGuard.sln /property:Platform=x86

format: build
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 217):
	cd $(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64 && $(MAKE) format

build-android:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 107):
	@echo 🤖 BUILD ANDROID
	cmake -S . -B $(ELECTIONGUARD_BUILD_LIBS_DIR)/android/$(TARGET)/arm64-v8a \
		-DCMAKE_BUILD_TYPE=$(TARGET) \
		-DBUILD_SHARED_LIBS=ON \
		-DCPM_SOURCE_CACHE=$(CPM_SOURCE_CACHE) \
		-DCMAKE_SYSTEM_NAME=Android \
		-DCMAKE_ANDROID_NDK=$(NDK_PATH) \
		-DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \
		-DCMAKE_SYSTEM_VERSION=26
	cmake --build $(ELECTIONGUARD_BUILD_LIBS_DIR)/android/$(TARGET)/arm64-v8a
	cmake -S . -B $(ELECTIONGUARD_BUILD_LIBS_DIR)/android/$(TARGET)/armeabi-v7a \
		-DCMAKE_BUILD_TYPE=$(TARGET) \
		-DBUILD_SHARED_LIBS=ON \
		-DCPM_SOURCE_CACHE=$(CPM_SOURCE_CACHE) \
		-DCMAKE_SYSTEM_NAME=Android \
		-DCMAKE_ANDROID_NDK=$(NDK_PATH) \
		-DCMAKE_ANDROID_ARCH_ABI=armeabi-v7a \
		-DCMAKE_SYSTEM_VERSION=26 \
		-DCMAKE_ANDROID_ARM_NEON=ON
	cmake --build $(ELECTIONGUARD_BUILD_LIBS_DIR)/android/$(TARGET)/armeabi-v7a
	cmake -S . -B $(ELECTIONGUARD_BUILD_LIBS_DIR)/android/$(TARGET)/x86 \
		-DCMAKE_BUILD_TYPE=$(TARGET) \
		-DBUILD_SHARED_LIBS=ON \
		-DCPM_SOURCE_CACHE=$(CPM_SOURCE_CACHE) \
		-DCMAKE_SYSTEM_NAME=Android \
		-DCMAKE_ANDROID_NDK=$(NDK_PATH) \
		-DCMAKE_ANDROID_ARCH_ABI=x86 \
		-DCMAKE_SYSTEM_VERSION=26
	cmake --build $(ELECTIONGUARD_BUILD_LIBS_DIR)/android/$(TARGET)/x86
	cmake -S . -B $(ELECTIONGUARD_BUILD_LIBS_DIR)/android/$(TARGET)/x86_64 \
		-DCMAKE_BUILD_TYPE=$(TARGET) \
		-DBUILD_SHARED_LIBS=ON \
		-DCPM_SOURCE_CACHE=$(CPM_SOURCE_CACHE) \
		-DCMAKE_SYSTEM_NAME=Android \
		-DCMAKE_ANDROID_NDK=$(NDK_PATH) \
		-DCMAKE_ANDROID_ARCH_ABI=x86_64 \
		-DCMAKE_SYSTEM_VERSION=26
	cmake --build $(ELECTIONGUARD_BUILD_LIBS_DIR)/android/$(TARGET)/x86_64

test-msvc:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 360):
	@echo 🧪 TEST MSVC
	cmake -S . -B $(ELECTIONGUARD_BUILD_LIBS_DIR)/msvc/x64 -G "Visual Studio 16 2019" -A x64 \
		-DCMAKE_BUILD_TYPE=$(TARGET) \
		-DBUILD_SHARED_LIBS=ON \
		-DEXPORT_INTERNALS=ON \
		-DCAN_USE_VECTOR_INTRINSICS=ON \
		-DUSE_TEST_PRIMES=OFF \
		-DOPTION_ENABLE_TESTS=ON \
		-DLOG_LEVEL=debug \
		-DCPM_SOURCE_CACHE=$(CPM_SOURCE_CACHE)
	cmake --build $(ELECTIONGUARD_BUILD_LIBS_DIR)/msvc/x64 --config $(TARGET)
	$(ELECTIONGUARD_BUILD_LIBS_DIR)/msvc/x64/test/$(TARGET)/ElectionGuardTests
	$(ELECTIONGUARD_BUILD_LIBS_DIR)/msvc/x64/test/$(TARGET)/ElectionGuardCTests

clean-netstandard:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 213):
	@echo 🗑️ CLEAN NETSTANDARD
	dotnet clean ./bindings/netstandard/ElectionGuard/ElectionGuard.sln

sanitize: sanitize-asan sanitize-tsan
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.

# Not a target:
.SUFFIXES:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

bench-netstandard: build-netstandard
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 321):
	@echo 🧪 BENCHMARK
	@echo net 5.0 x86
	./bindings/netstandard/ElectionGuard/ElectionGuard.Encryption.Bench/bin/x86/$(TARGET)/net5.0/ElectionGuard.Encryption.Bench
	@echo net 4.8 x86
	./bindings/netstandard/ElectionGuard/ElectionGuard.Encryption.Bench/bin/x86/$(TARGET)/net48/ElectionGuard.Encryption.Bench
	@echo net 5.0 x64
	./bindings/netstandard/ElectionGuard/ElectionGuard.Encryption.Bench/bin/x64/$(TARGET)/net5.0/ElectionGuard.Encryption.Bench
	@echo net 4.8 x64
	./bindings/netstandard/ElectionGuard/ElectionGuard.Encryption.Bench/bin/x64/$(TARGET)/net48/ElectionGuard.Encryption.Bench

.PHONY: all build build-msvc build-android build-ios clean clean-netstandard environment format memcheck sanitize sanitize-asan sanitize-tsan test test-msvc test-netstandard
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

environment:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  Implicit/static pattern stem: ''
#  File does not exist.
#  File has been updated.
#  Needs to be updated (-q is set).
# automatic
# @ := environment
# automatic
# * := 
# automatic
# < := 
# automatic
# + := 
# automatic
# % := 
# automatic
# ^ := 
# automatic
# ? := 
# automatic
# | := 
# variable set hash-table stats:
# Load=8/32=25%, Rehash=0, Collisions=1/11=9%
#  recipe to execute (from 'Makefile', line 61):
	@echo 🏁 WINDOWS INSTALL
	choco install wget
	choco install unzip
	wget -O cmake/CPM.cmake https://github.com/cpm-cmake/CPM.cmake/releases/download/v0.35.0/CPM.cmake
	wget -O sample-data-container.zip https://github.com/microsoft/electionguard/releases/download/v0.95.0/sample-data.zip
	unzip -o sample-data-container.zip
	unzip -o sample-data.zip

bench:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 293):
	@echo 🧪 BENCHMARK
	cmake -S . -B $(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64/$(TARGET) -G "MSYS Makefiles" \
		-DCMAKE_BUILD_TYPE=$(TARGET) \
		-DBUILD_SHARED_LIBS=ON \
		-DEXPORT_INTERNALS=ON \
		-DCAN_USE_VECTOR_INTRINSICS=ON \
		-DUSE_TEST_PRIMES=OFF \
		-DOPTION_ENABLE_TESTS=ON \
		-DCPM_SOURCE_CACHE=$(CPM_SOURCE_CACHE)
	cmake --build $(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64/$(TARGET)
	pwsh -Command "xcopy 'build\libs\x86_64\$(TARGET)\_deps\benchmark-build\src\libbenchmark.dll' 'build\libs\x86_64\$(TARGET)\test' /Q /Y;  $$null"
	$(ELECTIONGUARD_BUILD_LIBS_DIR)/x86_64/$(TARGET)/test/ElectionGuardBenchmark

# files hash-table stats:
# Load=28/1024=3%, Rehash=0, Collisions=0/81=0%
# VPATH Search Paths

# No 'vpath' search paths.

# No general ('VPATH' variable) search path.

# strcache buffers: 1 (0) / strings = 54 / storage = 593 B / avg = 10 B
# current buf: size = 8174 B / used = 593 B / count = 54 / avg = 10 B

# strcache performance: lookups = 113 / hit rate = 52%
# hash-table stats:
# Load=54/8192=1%, Rehash=0, Collisions=0/113=0%
# Finished Make data base on Fri Jun 03 11:44:18 2022

 
