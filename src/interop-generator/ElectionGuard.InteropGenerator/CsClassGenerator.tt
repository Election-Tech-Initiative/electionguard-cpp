<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.Json" #>
<#
var className = EgClass.ClassName;
#>
// DO NOT MODIFY THIS FILE
// This file is generated via ElectionGuard.InteropGenerator at /src/interop-generator

using System;
using System.Runtime.InteropServices;

namespace ElectionGuard
{
    public partial class <#= className #>
    {
        #region Properties
<# foreach (var egProperty in EgClass.Properties) { 
        var name = egProperty.Name;
        var type = egProperty.Type;
        var description = egProperty.Description;
        var entryPoint = egProperty.GetEntryPoint(className);
        var isInternalType = egProperty.NativeHandleType != null;
        var isComplexType = type == "string" || isInternalType;
        #>
        [DllImport(
            NativeInterface.DllName,
            EntryPoint = "<#= entryPoint #>",
            CallingConvention = CallingConvention.Cdecl, 
            SetLastError = true
        )]
        private static extern <#= isComplexType ? "Status" : type #> Get<#= name #>(
            NativeInterface.<#= className #>.<#= className #>Handle handle
<# if (isInternalType) { #>
            , out <#= egProperty.NativeHandleType #> objectId
<# } else if (type == "string") { #>
            , out IntPtr objectId
<# } #>
        );

        /// <Summary>
        /// <#= description #>
        /// </Summary>
        public unsafe <#= type #> <#= name #>
        {
            get
            {
<# if (isInternalType) { #>
                var status = Get<#= name #>(
                    Handle, out <#= egProperty.NativeHandleType #> value);
                status.ThrowIfError();
                return new <#= type #>(value);
<# } else if (type == "string") { #>
                var status = Get<#= name #>(Handle, out IntPtr value);
                status.ThrowIfError();
                var data = Marshal.PtrToStringAnsi(value);
                NativeInterface.Memory.FreeIntPtr(value);
                return data;
<# } else { #>
                return Get<#= name #>(Handle);
<# } #>
            }
        }

<#} // foreach EgProperty#>
        #endregion

        #region Methods
<# foreach (var method in EgClass.Methods) { #>
        /// <summary>
        /// <#= method.Description #>
        /// </summary>
        public unsafe <#= method.ReturnType #> <#= method.Name #>(
            <#= string.Join(", ", method.Params.Select(p => $"{p.Type} {p.Name}")) #>
        ) {
            return NativeInterface.<#= className #>.<#= method.Name #>(
                Handle, expectedObjectId);
        }
<# } // foreach method #>
        #endregion
    }
}
