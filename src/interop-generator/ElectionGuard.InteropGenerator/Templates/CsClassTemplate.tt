<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.Json" #>
<#
var className = EgClass.ClassName;
#>
// DO NOT MODIFY THIS FILE
// This file is generated via ElectionGuard.InteropGenerator at /src/interop-generator

using System;
using System.Runtime.InteropServices;

namespace ElectionGuard
{
    public partial class <#= className #>
    {
        #region Properties
<# foreach (var egProperty in EgClass.Properties) { 
        var isInternalType = egProperty.NativeHandleType != null;
        #>
        /// <Summary>
        /// <#= egProperty.Description #>
        /// </Summary>
        public unsafe <#= egProperty.TypeCs #> <#= egProperty.Name #>
        {
            get
            {
<# if (isInternalType) { #>
                var status = External.Get<#= egProperty.Name #>(
                    Handle, out <#= egProperty.NativeHandleType #> value);
                status.ThrowIfError();
                return new <#= egProperty.TypeCs #>(value);
<# } else if (egProperty.TypeCs == "string") { #>
                var status = External.Get<#= egProperty.Name #>(Handle, out IntPtr value);
                status.ThrowIfError();
                var data = Marshal.PtrToStringAnsi(value);
                NativeInterface.Memory.FreeIntPtr(value);
                return data;
<# } else { #>
                return External.Get<#= egProperty.Name #>(Handle);
<# } #>
            }
        }

<#} // foreach EgProperty#>
        #endregion

        #region Methods
<# foreach (var method in EgClass.Methods) { #>
        /// <summary>
        /// <#= method.Description #>
        /// </summary>
        public unsafe <#= method.ReturnTypeCs #> <#= method.Name #>(
            <#= string.Join(", ", method.Params.Select(p => $"{p.TypeCs} {p.Name}")) #>
        ) {
            return External.<#= method.Name #>(
                Handle, expectedObjectId);
        }
<# } // foreach method #>
        #endregion

        #region Extern
        private unsafe static class External {
<# foreach (var egProperty in EgClass.Properties) {
        var entryPoint = egProperty.GetEntryPoint(className);
        var isInternalType = egProperty.NativeHandleType != null;
        var isComplexType = egProperty.TypeCs == "string" || isInternalType;
#>
            [DllImport(
                NativeInterface.DllName,
                EntryPoint = "<#= entryPoint #>",
                CallingConvention = CallingConvention.Cdecl, 
                SetLastError = true
            )]
            internal static extern <#= isComplexType ? "Status" : egProperty.TypeCs #> Get<#= egProperty.Name #>(
                NativeInterface.<#= className #>.<#= className #>Handle handle
<# if (isInternalType) { #>
                , out <#= egProperty.NativeHandleType #> objectId
<# } else if (egProperty.TypeCs == "string") { #>
                , out IntPtr objectId
<# } // end is internal type #>
            );

<# } // end foreach property #>
<# foreach (var method in EgClass.Methods) {
    var entryPoint = method.GetEntryPoint(className);
#>
            [DllImport(NativeInterface.DllName, EntryPoint = "<#= entryPoint #>",
                CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
            internal static extern <#= method.ReturnTypeCs #> <#= method.Name #>(
                NativeInterface.<#= className #>.<#= className #>Handle handle,
                <#= string.Join(", ", method.Params.Select(p => $"[MarshalAs({p.MarshallAs()})] {p.TypeCs} {p.Name}")) #>
                );
<# } #>
        }
        #endregion
    }
}
