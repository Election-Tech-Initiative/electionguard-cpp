<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ElectionGuard.InteropGenerator.Helpers" #>
<#
	var classNameSnakeCase = EgClass.ClassName.ToSnakeCase();
	var classHandle = $"eg_{classNameSnakeCase}_t";
#>
/// @file <#= classNameSnakeCase.ToLower() #>.generated.h
#pragma once

#include "chaum_pedersen.h"
#include "elgamal.h"
#include "export.h"
#include "group.h"
#include "status.h"
#include "ballot.h"

#ifdef __cplusplus
extern "C" {
#endif

<# foreach (var egProperty in EgClass.Properties) { 
	var entryPoint = egProperty.GetEntryPoint(EgClass.ClassName);
	var returnType = egProperty.GetCReturnType();
	var outParamName = "out_" + egProperty.Name.ToSnakeCase();
#>
/**
 * @brief <#= egProperty.Description #>
 * @param[in] handle A pointer to the `eg_plaintext_ballot_selection_t` opaque instance
<# if (egProperty.IsReferenceType()) { #>
 * @param[out] <#= outParamName #> A pointer to the output <#= egProperty.Name #>.  <#
if (egProperty.TypeCs == "string") {
	this.Write("The caller is responsible for freeing it.");
} else {
	this.Write("The value is a reference and is not owned by the caller.");
}#>

 * @return eg_electionguard_status_t indicating success or failure
 * @retval ELECTIONGUARD_STATUS_SUCCESS The function was successfully executed
 * @retval ELECTIONGUARD_STATUS_ERROR_BAD_ALLOC The function was unable to allocate memory
<# } else { #>
 * @return The value of the property
<# } // end is reference type #>
 */
EG_API <#= returnType #> <#= entryPoint #>(
	<#= classHandle #> *handle<#
if (egProperty.IsReferenceType()) {
#>,
	<#= egProperty.GetOutVarType() #><#= outParamName #>
	);
<# } else { #>

	);
<# } #>

<# } // foreach property #>
<# foreach (var egMethod in EgClass.Methods) { 
	var entryPoint = egMethod.GetEntryPoint(EgClass.ClassName); #>
/**
 * <#= egMethod.Description #>
 */
EG_API <#= egMethod.ReturnTypeC #> <#= entryPoint #>(
	eg_plaintext_ballot_selection_t *handle<#
foreach (var parameter in egMethod.Params) {
	this.Write($",{Environment.NewLine}\t{parameter.TypeC}in_{parameter.Name.ToSnakeCase()}");
}
#>

	);

<# } // foreach method #>
#ifdef __cplusplus
}
#endif
